package org.semagrow.test;

import org.eclipse.rdf4j.query.*;
import org.eclipse.rdf4j.query.algebra.TupleExpr;
import org.eclipse.rdf4j.repository.Repository;
import org.eclipse.rdf4j.repository.RepositoryConnection;
import org.eclipse.rdf4j.repository.RepositoryException;
import org.eclipse.rdf4j.repository.config.RepositoryConfigException;
import org.locationtech.jts.geom.Geometry;
import org.locationtech.jts.io.ParseException;
import org.locationtech.jts.io.WKTReader;
import org.semagrow.cli.CliMain;
import org.semagrow.query.SemagrowTupleQuery;
import org.semagrow.repository.impl.SemagrowSailRepository;
import org.semagrow.sail.SemagrowSail;
import org.semagrow.sail.config.SemagrowSailConfig;
import org.semagrow.sail.config.SemagrowSailFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.FileNotFoundException;
import java.io.FileReader;

public class CropsBenchTest {

    private static final Logger logger = LoggerFactory.getLogger(CliMain.class);

    private static final String p = "" +
            "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n" +
            "PREFIX gadm: <http://gadm.org/ontology#>\n" +
            "PREFIX fs: <http://earthanalytics.eu/fs/ontology/>\n" +
            "PREFIX invekos: <http://earthanalytics.eu/invekos/ontology/>\n" +
            "PREFIX geo: <http://www.opengis.net/ont/geosparql#>\n" +
            "PREFIX geof: <http://www.opengis.net/def/function/geosparql/>\n" +
            "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n" +
            "PREFIX uom: <http://www.opengis.net/def/uom/OGC/1.0/>\n" +
            "\n";

    private static final String q1 =  p +
            "SELECT * WHERE {\n" +
            "   ?s rdf:type gadm:AdministrativeUnit3 .\n" +
            "   ?s gadm:has_NAME_1 ?adm1 .\n" +
            "   ?s gadm:has_NAME_2 ?adm2 .\n" +
            "   ?s gadm:has_NAME_3 ?adm3.\n" +
            "   ?s geo:hasGeometry ?g .\n" +
            "   ?g geo:asWKT ?wkt .\n" +
            "   \n" +
            "   FILTER (geof:sfIntersects(?wkt, \"POLYGON ((15.11 48.68, 15.11 48.72, 15.19 48.72, 15.19 48.68, 15.11 48.68))\"^^geo:wktLiteral)).\n" +
            "}";

    private static final String q2 = p +
            "SELECT * WHERE {\n" +
            "   ?s rdf:type gadm:AdministrativeUnit3 .\n" +
            "   ?s gadm:has_NAME_1 ?adm1 .\n" +
            "   ?s gadm:has_NAME_2 ?adm2 .\n" +
            "   ?s gadm:has_NAME_3 ?adm3.\n" +
            "   ?s geo:hasGeometry ?g .\n" +
            "   ?g geo:asWKT ?wkt .\n" +
            "   \n" +
            "   FILTER (geof:sfIntersects(?wkt, \"POLYGON ((14.87 48.18, 14.87 48.14, 14.94 48.14, 14.94 48.18, 14.87 48.18))\"^^geo:wktLiteral)).\n" +
            "}";

    private static final String q3 = p +
            "SELECT * WHERE {\n" +
            "   ?u rdf:type gadm:AdministrativeUnit3 .\n" +
            "   ?u gadm:has_NAME_3 \"Kirchberg am Walde\" .\n" +
            "   ?u geo:hasGeometry ?x .\n" +
            "   ?x geo:asWKT ?wkt1 .\n" +
            "   \n" +
            "   ?s rdf:type fs:FoodSecurityObservation .\n" +
            "   ?s fs:hasDN ?dn .\n" +
            "   ?s fs:hasRECDATE \"2018-04-10T00:00:00\"^^xsd:dateTime .\n" +
            "   ?s geo:hasGeometry ?y .\n" +
            "   ?y geo:asWKT ?wkt2 .\n" +
            "   \n" +
            "   BIND(geof:distance(?wkt1, ?wkt2, uom:metre) as ?dist).\n" +
            "   FILTER (?dist < 50000) .\n" +
            "}";

    private static final String q4 = p +
            "SELECT * WHERE {\n" +
            "   ?u rdf:type gadm:AdministrativeUnit3 .\n" +
            "   ?u gadm:has_NAME_3 \"Kirchberg am Walde\" .\n" +
            "   ?u geo:hasGeometry ?x .\n" +
            "   ?x geo:asWKT ?wkt1 .\n" +
            "   \n" +
            "   ?f invekos:hasID ?id .\n" +
            "   ?f invekos:hasCropTypeName \"GRASSLAND\"^^xsd:string .\n" +
            "   ?f invekos:hasArea ?area .\n" +
            "   ?f geo:hasGeometry ?y .\n" +
            "   ?y geo:asWKT ?wkt2 .\n" +
            "   \n" +
            "  FILTER (geof:sfWithin(?wkt1, ?wkt2)).\n" +
            "}";

    private static final String q5 = p +
            "SELECT * WHERE {\n" +
            "   ?f invekos:hasID ?id .\n" +
            "   ?f invekos:hasCropTypeName \"GRASSLAND\"^^xsd:string .\n" +
            "   ?f invekos:hasArea ?area .\n" +
            "   ?f geo:hasGeometry ?x .\n" +
            "   ?x geo:asWKT ?wkt1 .\n" +
            "   \n" +
            "   ?s rdf:type fs:FoodSecurityObservation .\n" +
            "   ?s fs:hasDN ?dn .\n" +
            "   ?s fs:hasRECDATE \"2018-04-10T00:00:00\"^^xsd:dateTime .\n" +
            "   ?s geo:hasGeometry ?y .\n" +
            "   ?y geo:asWKT ?wkt2 .\n" +
            "   FILTER (?dn < 50) .\n" +
            "   \n" +
            "   FILTER (geof:sfIntersects(?wkt1, ?wkt2)).\n" +
            "   FILTER (geof:sfIntersects(?wkt1, \"POLYGON ((15.11 48.68, 15.11 48.72, 15.19 48.72, 15.19 48.68, 15.11 48.68))\"^^geo:wktLiteral)).\n" +
            "   FILTER (geof:sfIntersects(?wkt2, \"POLYGON ((15.11 48.68, 15.11 48.72, 15.19 48.72, 15.19 48.68, 15.11 48.68))\"^^geo:wktLiteral)).\n" +
            "}";

    private static final String q6 = p +
            "SELECT * WHERE {\n" +
            "   ?u rdf:type gadm:AdministrativeUnit3 .\n" +
            "   ?u gadm:has_NAME_3 \"Kirchberg am Walde\" .\n" +
            "   ?u geo:hasGeometry ?x .\n" +
            "   ?x geo:asWKT ?wkt1 .\n" +
            "   \n" +
            "   ?f invekos:hasID ?id .\n" +
            "   ?f invekos:hasCropTypeName \"GRASSLAND\"^^xsd:string .\n" +
            "   ?f invekos:hasArea ?area .\n" +
            "   ?f geo:hasGeometry ?y .\n" +
            "   ?y geo:asWKT ?wkt2 .\n" +
            "   \n" +
            "   ?s rdf:type fs:FoodSecurityObservation .\n" +
            "   ?s fs:hasDN ?dn .\n" +
            "   ?s fs:hasRECDATE \"2018-04-10T00:00:00\"^^xsd:dateTime .\n" +
            "   ?s geo:hasGeometry ?z .\n" +
            "   ?z geo:asWKT ?wkt3 .\n" +
            "   FILTER (?dn < 50) .\n" +
            "   \n" +
            "   FILTER (geof:sfWithin(?wkt2, ?wkt1)).\n" +
            "   FILTER (geof:sfWithin(?wkt2, ?wkt3)).\n" +
            "   FILTER (geof:sfIntersects(?wkt1, ?wkt3)).\n" +
            "}";

    public static void main(String[] args) throws ParseException, FileNotFoundException {

        /*int lucas1[] = { 5245, 2887, 8653, 7357, 6112, 1768, 3939, 1618, 8518, 7203, 887, 6894, 4616 };
        int lucas2[] = { 716, 2542, 8538, 8061 };
        int lucas3[] = { 2266, 5798, 2091, 3114, 1193, 7768, 5046, 7708, 4413, 5451, 447 };

        for (int i: lucas1) {
            String[] argv = {"/tmp/repository.ttl", getQuery1(i), "/tmp/results-l1-" + i + ".json"};
            CliMain.main(argv);
            decompose(getQuery1(i));
        }

        for (int i: lucas2) {
            String[] argv = {"/tmp/repository.ttl", getQuery2(i), "/tmp/results-l2-" + i + ".json"};
            CliMain.main(argv);
            decompose(getQuery2(i));
        }

        for (int i: lucas3) {
            String[] argv = {"/tmp/repository.ttl", getQuery3(i), "/tmp/results-l3-" + i + ".json"};
            CliMain.main(argv);
            decompose(getQuery3(i));
        }*/
        //double t1 = System.currentTimeMillis();
        decompose(q3);
        //double t2 = System.currentTimeMillis();
        //System.out.println("Time passed: " + (t2-t1));

        //WKTReader reader = new WKTReader();

        //Geometry g = reader.read("MULTIPOLYGON (((15.059101104736328 48.70695877075207, 15.051823616027946 48.71253967285162, 15.048924446106014 48.714927673339844, 15.047711372375488 48.71602630615246, 15.046727180480957 48.71702194213873, 15.045860290527344 48.71803665161144, 15.045125007629508 48.71909332275402, 15.044565200805664 48.7202033996582, 15.04421234130865 48.721412658691406, 15.044063568115234 48.722660064697266, 15.0440931320191 48.723907470703125, 15.044294357299805 48.72511672973627, 15.044680595398006 48.72625350952143, 15.045281410217228 48.72727584838867, 15.046095848083553 48.728126525878906, 15.04709243774414 48.728858947753906, 15.048219680786133 48.72950363159174, 15.050726890564079 48.73062896728521, 15.053416252136287 48.731632232666016, 15.060219764709473 48.73397064208996, 15.062689781189022 48.734935760498104, 15.063776016235465 48.73544311523443, 15.064703941345215 48.73597717285162, 15.065405845642204 48.736557006835994, 15.06579399108881 48.737186431884766, 15.065789222717342 48.737888336181584, 15.065457344055176 48.73864364624035, 15.064878463745117 48.739444732666016, 15.064093589782829 48.74029541015625, 15.063014030456657 48.74129104614269, 15.06022739410406 48.74359512329113, 15.052824974060172 48.749267578125, 15.061637878418082 48.76039886474615, 15.062839508056754 48.761688232421875, 15.06370639801031 48.7623405456543, 15.064176559448299 48.76255416870117, 15.065217971801815 48.762683868408146, 15.066922187805119 48.76243972778332, 15.069293975830135 48.76179885864258, 15.077081680297908 48.75947189331055, 15.100708961486873 48.75384521484375, 15.109509468078613 48.745368957519645, 15.112772941589412 48.74246978759771, 15.114480972290153 48.741237640380916, 15.115373611450252 48.74073791503912, 15.116305351257324 48.740348815918026, 15.117268562316838 48.74010467529297, 15.119296073913688 48.739906311035156, 15.121401786804313 48.73993301391613, 15.12354564666748 48.74007415771496, 15.150595664978084 48.74254226684576, 15.150191307067871 48.73689270019531, 15.150164604187069 48.733695983886776, 15.150412559509334 48.73215484619146, 15.150660514831543 48.73147964477545, 15.151029586792106 48.73088836669933, 15.151559829711914 48.73038864135748, 15.15221118927002 48.72997665405279, 15.152947425842342 48.729625701904354, 15.154575347900447 48.729034423828125, 15.158858299255485 48.72774887084972, 15.160387039184627 48.72716522216797, 15.16103553771984 48.72682189941412, 15.16156196594244 48.726421356201286, 15.161918640136776 48.72594833374029, 15.16206359863287 48.72539520263666, 15.162043571472111 48.72476959228527, 15.161901473999137 48.724090576171875, 15.161042213439885 48.721855163574276, 15.159886360168514 48.71948623657232, 15.154508590698242 48.70906066894531, 15.145917892455998 48.69335937499994, 15.142000198364201 48.69881820678711, 15.13795280456543 48.70408630371094, 15.135674476623478 48.70680999755865, 15.133324623107967 48.70938110351557, 15.130975723266602 48.71163940429699, 15.128704071044865 48.713409423828125, 15.126570701599178 48.71455383300781, 15.124382972717399 48.71522521972662, 15.122140884399528 48.71556472778332, 15.119916915893668 48.715641021728516, 15.117779731750545 48.715492248535156, 15.115807533264274 48.71512985229498, 15.11408805847168 48.714550018310604, 15.11273002624506 48.71372604370117, 15.11186504364025 48.71260833740246, 15.111591339111328 48.71111679077154, 15.11180591583252 48.709362030029354, 15.11233901977539 48.70745086669933, 15.114537239074764 48.70162582397472, 15.115069389343319 48.699935913085994, 15.115286827087402 48.69853210449219, 15.11502838134777 48.6975479125976, 15.114144325256348 48.69707870483393, 15.112741470336971 48.69705963134771, 15.110957145690918 48.6973609924317, 15.108896255493221 48.69789505004883, 15.106637954711971 48.69858551025396, 15.09659481048584 48.7019424438476, 15.093976020813102 48.702720642089844, 15.091348648071346 48.7033805847168, 15.088723182678336 48.703868865966854, 15.086110115051326 48.70409393310547, 15.083741188049373 48.7040252685548, 15.075250625610295 48.70329284667969, 15.07221984863287 48.703243255615234, 15.069267272949332 48.70345306396496, 15.06655502319336 48.70394515991205, 15.064118385315055 48.704627990722656, 15.062055587768555 48.70537567138666, 15.060465812683162 48.70608520507824, 15.059446334838924 48.70664215087896, 15.059101104736328 48.70695877075207)))");
        //System.out.println(g.buffer(50000));

        /*WKTReader reader = new WKTReader();

        Geometry g[] = new Geometry[9];

        g[0] = reader.read(new FileReader("/home/antru/Documents/xearth/geospatial-selector/poly/wkt1.txt"));
        g[1] = reader.read(new FileReader("/home/antru/Documents/xearth/geospatial-selector/poly/wkt2.txt"));
        g[2] = reader.read(new FileReader("/home/antru/Documents/xearth/geospatial-selector/poly/wkt3.txt"));
        g[3] = reader.read(new FileReader("/home/antru/Documents/xearth/geospatial-selector/poly/wkt4.txt"));
        g[4] = reader.read(new FileReader("/home/antru/Documents/xearth/geospatial-selector/poly/wkt5.txt"));
        g[5] = reader.read(new FileReader("/home/antru/Documents/xearth/geospatial-selector/poly/wkt6.txt"));
        g[6] = reader.read(new FileReader("/home/antru/Documents/xearth/geospatial-selector/poly/wkt7.txt"));
        g[7] = reader.read(new FileReader("/home/antru/Documents/xearth/geospatial-selector/poly/wkt8.txt"));
        g[8] = reader.read(new FileReader("/home/antru/Documents/xearth/geospatial-selector/poly/wkt9.txt"));

        Geometry line = reader.read("MULTILINESTRING ((16.16966629 47.4217453, 16.206007 47.424366), (16.206007 47.424366, 16.25138283 47.44787979), (16.25138283 47.44787979, 16.28032684 47.45595169), (16.28032684 47.45595169, 16.29349709 47.4640274), (16.29349709 47.4640274, 16.29654884 47.46611404), (16.29654884 47.46611404, 16.2983017 47.4675827), (16.2983017 47.4675827, 16.29902077 47.4683609), (16.29902077 47.4683609, 16.29958534 47.46917725), (16.29958534 47.46917725, 16.29994202 47.470047), (16.29994202 47.470047, 16.30005074 47.47097015), (16.30005074 47.47097015, 16.29997444 47.47193909), (16.29997444 47.47193909, 16.29932976 47.47489166), (16.29932976 47.47489166, 16.29917336 47.47582245), (16.29917336 47.47582245, 16.29915237 47.47668457), (16.29915237 47.47668457, 16.29933739 47.47744751), (16.29933739 47.47744751, 16.29977989 47.47807312), (16.29977989 47.47807312, 16.30043793 47.47860336), (16.30043793 47.47860336, 16.30125427 47.47905731), (16.30125427 47.47905731, 16.30218697 47.47946548), (16.30218697 47.47946548, 16.30645561 47.48096848), (16.30645561 47.48096848, 16.30859375 47.48188019), (16.30859375 47.48188019, 16.30958748 47.48246002), (16.30958748 47.48246002, 16.31051826 47.48317337), (16.31051826 47.48317337, 16.31137848 47.48398972), (16.31137848 47.48398972, 16.31219292 47.48489761), (16.31219292 47.48489761, 16.31395912 47.48728943), (16.31395912 47.48728943, 16.31577301 47.4900856), (16.31577301 47.4900856, 16.31900406 47.4954567), (16.31900406 47.4954567, 16.33841896 47.51608276), (16.33841896 47.51608276, 16.31421471 47.54311752), (16.31421471 47.54311752, 16.31305695 47.56604004), (16.31305695 47.56604004, 16.33012962 47.59024811), (16.33012962 47.59024811, 16.32885361 47.59525299), (16.32885361 47.59525299, 16.32847786 47.5971756), (16.32847786 47.5971756, 16.32844925 47.59804535), (16.32844925 47.59804535, 16.3285141 47.59843445), (16.3285141 47.59843445, 16.32865906 47.59877777), (16.32865906 47.59877777, 16.32889938 47.59906387), (16.32889938 47.59906387, 16.32958984 47.59951782), (16.32958984 47.59951782, 16.33090019 47.60003662), (16.33090019 47.60003662, 16.34395981 47.6039772), (16.34395981 47.6039772, 16.3453598 47.60509491), (16.3453598 47.60509491, 16.34714699 47.60677719), (16.34714699 47.60677719, 16.34806442 47.60777283), (16.34806442 47.60777283, 16.34888458 47.60882187), (16.34888458 47.60882187, 16.34952545 47.60987473), (16.34952545 47.60987473, 16.3499012 47.61089706), (16.3499012 47.61089706, 16.34995461 47.61185837), (16.34995461 47.61185837, 16.34928894 47.61429596), (16.34928894 47.61429596, 16.34919548 47.6150322), (16.34919548 47.6150322, 16.34931755 47.61569977), (16.34931755 47.61569977, 16.34972 47.61628342), (16.34972 47.61628342, 16.35034943 47.61680603), (16.35034943 47.61680603, 16.35206032 47.61772156), (16.35206032 47.61772156, 16.35411835 47.61854172), (16.35411835 47.61854172, 16.36326599 47.62159348), (16.36326599 47.62159348, 16.36658096 47.62285233), (16.36658096 47.62285233, 16.36856079 47.62386703), (16.36856079 47.62386703, 16.36941528 47.62447357), (16.36941528 47.62447357, 16.37013435 47.62518692), (16.37013435 47.62518692, 16.37068558 47.62603378), (16.37068558 47.62603378, 16.37109566 47.62699127), (16.37109566 47.62699127, 16.37139702 47.62803268), (16.37139702 47.62803268, 16.37178612 47.63027191), (16.37178612 47.63027191, 16.3720932 47.63436127), (16.3720932 47.63436127, 16.37242889 47.64373016), (16.37242889 47.64373016, 16.35464668 47.66730118), (16.35464668 47.66730118, 16.35310555 47.66951752), (16.35310555 47.66951752, 16.3522892 47.67099762), (16.3522892 47.67099762, 16.35201073 47.67174149), (16.35201073 47.67174149, 16.35187149 47.67248917), (16.35187149 47.67248917, 16.35190201 47.6731987), (16.35190201 47.6731987, 16.35208511 47.67394257), (16.35208511 47.67394257, 16.35243797 47.67478943), (16.35243797 47.67478943, 16.35292435 47.67571259), (16.35292435 47.67571259, 16.35412598 47.67761993), (16.35412598 47.67761993, 16.35663223 47.68111801), (16.35663223 47.68111801, 16.32303047 47.68374634), (16.32303047 47.68374634, 16.30768967 47.68766403), (16.30768967 47.68766403, 16.30823898 47.69645309), (16.30823898 47.69645309, 16.29388046 47.71618652), (16.29388046 47.71618652, 16.2955246 47.74255371), (16.2955246 47.74255371, 16.29932976 47.76182175), (16.29932976 47.76182175, 16.30206108 47.7765274), (16.30206108 47.7765274, 16.30260086 47.77985382), (16.30260086 47.77985382, 16.30281258 47.78197098), (16.30281258 47.78197098, 16.30282974 47.78296661), (16.30282974 47.78296661, 16.30275536 47.7838974), (16.30275536 47.7838974, 16.30255699 47.78474426), (16.30255699 47.78474426, 16.30218697 47.78546906), (16.30218697 47.78546906, 16.30158806 47.78606796), (16.30158806 47.78606796, 16.30080986 47.7865448), (16.30080986 47.7865448, 16.29990578 47.78693008), (16.29990578 47.78693008, 16.29890823 47.78725052), (16.29890823 47.78725052, 16.2967453 47.78777313), (16.2967453 47.78777313, 16.2700119 47.79249573), (16.2700119 47.79249573, 16.28691864 47.81319809), (16.28691864 47.81319809, 16.30912209 47.80864716), (16.30912209 47.80864716, 16.31103897 47.8081131), (16.31103897 47.8081131, 16.31190109 47.80779648), (16.31190109 47.80779648, 16.31266212 47.80743027), (16.31266212 47.80743027, 16.31328011 47.80699158), (16.31328011 47.80699158, 16.31370354 47.80644989), (16.31370354 47.80644989, 16.31389046 47.8057785), (16.31389046 47.8057785, 16.31387711 47.80500412), (16.31387711 47.80500412, 16.31371689 47.80415344), (16.31371689 47.80415344, 16.3131218 47.80231094), (16.3131218 47.80231094, 16.31151962 47.79837799), (16.31151962 47.79837799, 16.31080055 47.79640579), (16.31080055 47.79640579, 16.31053734 47.79543304), (16.31053734 47.79543304, 16.31038284 47.79448318), (16.31038284 47.79448318, 16.31040382 47.79354477), (16.31040382 47.79354477, 16.31070709 47.79258728), (16.31070709 47.79258728, 16.3112545 47.7915802), (16.3112545 47.7915802, 16.31197929 47.79056549), (16.31197929 47.79056549, 16.31368637 47.78863907), (16.31368637 47.78863907, 16.31645775 47.78603363), (16.31645775 47.78603363, 16.34346581 47.80279541), (16.34346581 47.80279541, 16.34614182 47.80462646), (16.34614182 47.80462646, 16.34776688 47.80598068), (16.34776688 47.80598068, 16.34848595 47.80673218), (16.34848595 47.80673218, 16.34909821 47.80752945), (16.34909821 47.80752945, 16.3496418 47.80838013), (16.3496418 47.80838013, 16.35059166 47.81019211), (16.35059166 47.81019211, 16.35189247 47.8132515), (16.35189247 47.8132515, 16.35518265 47.82201004), (16.35518265 47.82201004, 16.36320877 47.8253212), (16.36320877 47.8253212, 16.37903595 47.82843018), (16.37903595 47.82843018, 16.37804413 47.82909393), (16.37804413 47.82909393, 16.37680626 47.83007431), (16.37680626 47.83007431, 16.37622261 47.83066177), (16.37622261 47.83066177, 16.37575912 47.83127975), (16.37575912 47.83127975, 16.3754921 47.83190536), (16.3754921 47.83190536, 16.37547874 47.8325386), (16.37547874 47.8325386, 16.3757019 47.83312607), (16.3757019 47.83312607, 16.37657928 47.83416367), (16.37657928 47.83416367, 16.37767792 47.83519745), (16.37767792 47.83519745, 16.38320923 47.8398819), (16.38320923 47.8398819, 16.38495064 47.84144211), (16.38495064 47.84144211, 16.3859272 47.84248352), (16.3859272 47.84248352, 16.38630676 47.84300613), (16.38630676 47.84300613, 16.38657188 47.84352493), (16.38657188 47.84352493, 16.38668442 47.84404755), (16.38668442 47.84404755, 16.38660622 47.84456635), (16.38660622 47.84456635, 16.38637352 47.84508133), (16.38637352 47.84508133, 16.38602638 47.84560013), (16.38602638 47.84560013, 16.38510704 47.84663391), (16.38510704 47.84663391, 16.38283539 47.84870911), (16.38283539 47.84870911, 16.37552261 47.85493088), (16.37552261 47.85493088, 16.35039902 47.86967087), (16.35039902 47.86967087, 16.38219261 47.8776474), (16.38219261 47.8776474, 16.39034081 47.88271332), (16.39034081 47.88271332, 16.39400482 47.8805542), (16.39400482 47.8805542, 16.39665222 47.87924576), (16.39665222 47.87924576, 16.39801407 47.87870789), (16.39801407 47.87870789, 16.39932632 47.87832642), (16.39932632 47.87832642, 16.40053749 47.87816238), (16.40053749 47.87816238, 16.40161705 47.87823868), (16.40161705 47.87823868, 16.40266609 47.87846756), (16.40266609 47.87846756, 16.4047699 47.87918854), (16.4047699 47.87918854, 16.40789413 47.88063431), (16.40789413 47.88063431, 16.41086388 47.88235474), (16.41086388 47.88235474, 16.41261482 47.88369751), (16.41261482 47.88369751, 16.41336441 47.88446426), (16.41336441 47.88446426, 16.41399765 47.88531494), (16.41399765 47.88531494, 16.41452217 47.88622665), (16.41452217 47.88622665, 16.41495323 47.8871727), (16.41495323 47.8871727, 16.41529083 47.888134), (16.41529083 47.888134, 16.41552734 47.88908005), (16.41552734 47.88908005, 16.4156456 47.88999176), (16.4156456 47.88999176, 16.4156208 47.89084625), (16.4156208 47.89084625, 16.41540718 47.89160538), (16.41540718 47.89160538, 16.41499138 47.89223862), (16.41499138 47.89223862, 16.41442299 47.89278412), (16.41442299 47.89278412, 16.4125042 47.89414597), (16.4125042 47.89414597, 16.41202164 47.89458466), (16.41202164 47.89458466, 16.41175461 47.89505386), (16.41175461 47.89505386, 16.41177368 47.89556885), (16.41177368 47.89556885, 16.41204071 47.89612961), (16.41204071 47.89612961, 16.41249657 47.89672089), (16.41249657 47.89672089, 16.41309547 47.89733505), (16.41309547 47.89733505, 16.41480064 47.89877319), (16.41480064 47.89877319, 16.41713142 47.90052032), (16.41713142 47.90052032, 16.42306328 47.90473938), (16.42306328 47.90473938, 16.42624092 47.91305161), (16.42624092 47.91305161, 16.42758751 47.91635513), (16.42758751 47.91635513, 16.42874527 47.91869354), (16.42874527 47.91869354, 16.42969894 47.92010498), (16.42969894 47.92010498, 16.43029594 47.92077255), (16.43029594 47.92077255, 16.43164253 47.92198181), (16.43164253 47.92198181, 16.43385887 47.92364502), (16.43385887 47.92364502, 16.45390129 47.9373703), (16.45390129 47.9373703, 16.51974869 47.94615555), (16.51974869 47.94615555, 16.54154587 47.92090988), (16.54154587 47.92090988, 16.57586288 47.8882637), (16.57586288 47.8882637, 16.5811882 47.88987732), (16.5811882 47.88987732, 16.59788895 47.90525818), (16.59788895 47.90525818, 16.6089077 47.91375351), (16.6089077 47.91375351, 16.63392639 47.93593979), (16.63392639 47.93593979, 16.63998795 47.94809341), (16.63998795 47.94809341, 16.65819359 47.9607811), (16.65819359 47.9607811, 16.65979767 47.96181107), (16.65979767 47.96181107, 16.66086578 47.96235275), (16.66086578 47.96235275, 16.66139793 47.96253204), (16.66139793 47.96253204, 16.66194725 47.96260071), (16.66194725 47.96260071, 16.66253853 47.96249771), (16.66253853 47.96249771, 16.66317749 47.96225739), (16.66317749 47.96225739, 16.66449547 47.96150208), (16.66449547 47.96150208, 16.66690636 47.95965195), (16.66690636 47.95965195, 16.69296837 47.96603012), (16.69296837 47.96603012, 16.69544792 47.96670914), (16.69544792 47.96670914, 16.69702911 47.96726227), (16.69702911 47.96726227, 16.69847679 47.96800995), (16.69847679 47.96800995, 16.69907379 47.9684639), (16.69907379 47.9684639, 16.70017242 47.96957397), (16.70017242 47.96957397, 16.7019577 47.97200012), (16.7019577 47.97200012, 16.70463753 47.97617722), (16.70463753 47.97617722, 16.70214844 48.01498795), (16.70214844 48.01498795, 16.73200226 48.01391602), (16.73200226 48.01391602, 16.73945427 48.01371384), (16.73945427 48.01371384, 16.74687004 48.01373672), (16.74687004 48.01373672, 16.7493248 48.01385117), (16.7493248 48.01385117, 16.7517643 48.01405716), (16.7517643 48.01405716, 16.75418282 48.01438904), (16.75418282 48.01438904, 16.75654793 48.01486588), (16.75654793 48.01486588, 16.75889397 48.01546097), (16.75889397 48.01546097, 16.76354599 48.01689148), (16.76354599 48.01689148, 16.77047157 48.01934814), (16.77047157 48.01934814, 16.79118919 48.02709961), (16.79118919 48.02709961, 16.79581833 48.02866745), (16.79581833 48.02866745, 16.80048752 48.02999496), (16.80048752 48.02999496, 16.80298615 48.0304985), (16.80298615 48.0304985, 16.80573463 48.03083038), (16.80573463 48.03083038, 16.80871582 48.03102875), (16.80871582 48.03102875, 16.81180763 48.03111649), (16.81180763 48.03111649, 16.81783104 48.03106689), (16.81783104 48.03106689, 16.82618713 48.03071213), (16.82618713 48.03071213, 16.82879639 48.03063583), (16.82879639 48.03063583, 16.83078194 48.03147507), (16.83078194 48.03147507, 16.8331852 48.03284073), (16.8331852 48.03284073, 16.83436394 48.03372192), (16.83436394 48.03372192, 16.8353653 48.03470612), (16.8353653 48.03470612, 16.83605766 48.03578949), (16.83605766 48.03578949, 16.83636093 48.03707123), (16.83636093 48.03707123, 16.83624268 48.03836823), (16.83624268 48.03836823, 16.83494759 48.04197311), (16.83494759 48.04197311, 16.8347168 48.04314804), (16.8347168 48.04314804, 16.83476639 48.04428864), (16.83476639 48.04428864, 16.83516502 48.04535675), (16.83516502 48.04535675, 16.83584404 48.04639053), (16.83584404 48.04639053, 16.83672523 48.04740143), (16.83672523 48.04740143, 16.83774948 48.04838943), (16.83774948 48.04838943, 16.84006882 48.05033493), (16.84006882 48.05033493, 16.84387589 48.0532074), (16.84387589 48.0532074, 16.86351967 48.06749725), (16.86351967 48.06749725, 16.86745453 48.07027435), (16.86745453 48.07027435, 16.86897469 48.07118225), (16.86897469 48.07118225, 16.87067795 48.07203293), (16.87067795 48.07203293, 16.87249565 48.07276535), (16.87249565 48.07276535, 16.87435341 48.07331848), (16.87435341 48.07331848, 16.87617874 48.0736351), (16.87617874 48.0736351, 16.87787628 48.07370377), (16.87787628 48.07370377, 16.87936592 48.07359695), (16.87936592 48.07359695, 16.8805542 48.0734024), (16.8805542 48.0734024, 16.88163567 48.07306671), (16.88163567 48.07306671, 16.90788651 48.07402802), (16.90788651 48.07402802, 16.92037964 48.06790543), (16.92037964 48.06790543, 16.92158508 48.06718826), (16.92158508 48.06718826, 16.92214775 48.06665802), (16.92214775 48.06665802, 16.92228889 48.06636429), (16.92228889 48.06636429, 16.92230225 48.06605148), (16.92230225 48.06605148, 16.92221642 48.0657196), (16.92221642 48.0657196, 16.92183685 48.06501007), (16.92183685 48.06501007, 16.92066383 48.06350327), (16.92066383 48.06350327, 16.9172821 48.05965042), (16.9172821 48.05965042, 16.90898323 48.05724716), (16.90898323 48.05724716, 16.90783691 48.05680466), (16.90783691 48.05680466, 16.90719414 48.05641556), (16.90719414 48.05641556, 16.90694046 48.05616379), (16.90694046 48.05616379, 16.90675163 48.05587006), (16.90675163 48.05587006, 16.90650749 48.05517197), (16.90650749 48.05517197, 16.90632248 48.05398178), (16.90632248 48.05398178, 16.90579033 48.04591751), (16.90579033 48.04591751, 16.95366669 48.02154541), (16.95366669 48.02154541, 16.97246361 48.02800751), (16.97246361 48.02800751, 16.97979927 48.02862549), (16.97979927 48.02862549, 16.98241425 48.02893066), (16.98241425 48.02893066, 16.98423576 48.0293541), (16.98423576 48.0293541, 16.98528481 48.02987289), (16.98528481 48.02987289, 16.98574066 48.03026581), (16.98574066 48.03026581, 16.98651505 48.03125), (16.98651505 48.03125, 16.98749924 48.03297424), (16.98749924 48.03297424, 16.99494553 48.04843903), (16.99494553 48.04843903, 17.0179863 48.07588959), (17.0179863 48.07588959, 17.00050735 48.08700943), (17.00050735 48.08700943, 17.00888252 48.09378815), (17.00888252 48.09378815, 17.02397728 48.09015656), (17.02397728 48.09015656, 17.02697182 48.08949661), (17.02697182 48.08949661, 17.02988052 48.08897018), (17.02988052 48.08897018, 17.03264427 48.08871078), (17.03264427 48.08871078, 17.03393173 48.08875275), (17.03393173 48.08875275, 17.03512573 48.08896255), (17.03512573 48.08896255, 17.03619194 48.08940887), (17.03619194 48.08940887, 17.03712082 48.09014893), (17.03712082 48.09014893, 17.03792572 48.09112167), (17.03792572 48.09112167, 17.03864098 48.09225464), (17.03864098 48.09225464, 17.03991508 48.09482956), (17.03991508 48.09482956, 17.0423851 48.10031128), (17.0423851 48.10031128, 17.04309082 48.10161209), (17.04309082 48.10161209, 17.04388046 48.10282898), (17.04388046 48.10282898, 17.04478836 48.10393143), (17.04478836 48.10393143, 17.04583359 48.10487747), (17.04583359 48.10487747, 17.04699707 48.10570526), (17.04699707 48.10570526, 17.0482502 48.10644531), (17.0482502 48.10644531, 17.05092812 48.10774231), (17.05092812 48.10774231, 17.05800819 48.11059189), (17.05800819 48.11059189, 17.05949974 48.11126328), (17.05949974 48.11126328, 17.06107712 48.1121254), (17.06107712 48.1121254, 17.06264496 48.11315155), (17.06264496 48.11315155, 17.06411552 48.11431885), (17.06411552 48.11431885, 17.06540108 48.1156044), (17.06540108 48.1156044, 17.06631851 48.11677551), (17.06631851 48.11677551, 17.06705093 48.11791611), (17.06705093 48.11791611, 17.06760406 48.1189537), (17.06760406 48.1189537, 17.06798172 48.11980057), (17.06798172 48.11980057, 17.06822586 48.12062836))");

        for (int i=0; i<9; i++) {
            for (int j=i+1; j<9; j++) {
                if (g[i].touches(g[j]) || g[i].disjoint(g[j])) {
                    //System.out.println("wkt-" + i + " touches wkt-" + j);
                    //System.out.println(g[i].intersection(g[j]).toString());
                    System.out.println(",");
                }
                else {
                    System.out.println("booom");
                }
            }
        }
        */
    }

    public static void decompose(String queryString) {
        try {
            SemagrowSailFactory factory = new SemagrowSailFactory();
            SemagrowSailConfig config = new SemagrowSailConfig();
            Repository repository = new SemagrowSailRepository((SemagrowSail) factory.getSail(config));
            repository.initialize();
            RepositoryConnection conn = repository.getConnection();
            TupleQuery query = conn.prepareTupleQuery(QueryLanguage.SPARQL, queryString);
            TupleExpr plan = ((SemagrowTupleQuery) query).getDecomposedQuery();

        } catch (RepositoryConfigException e) {
            e.printStackTrace();
        } catch (RepositoryException e) {
            e.printStackTrace();
        } catch (MalformedQueryException e) {
            e.printStackTrace();
        } catch (QueryEvaluationException e) {
            e.printStackTrace();
        } catch (TupleQueryResultHandlerException e) {
            e.printStackTrace();
        }
    }

    public static String getQuery1(int id) {
        return "" +
                "PREFIX lucas: <http://deg.iit.demokritos.gr/lucas/>\n" +
                "PREFIX lucas_r: <http://deg.iit.demokritos.gr/lucas/resource/>\n" +
                "PREFIX invekos: <http://deg.iit.demokritos.gr/invekos/>\n" +
                "PREFIX lictm: <http://deg.iit.demokritos.gr/>\n" +
                "PREFIX geof: <http://www.opengis.net/def/function/geosparql/>\n" +
                "PREFIX geo: <http://www.opengis.net/ont/geosparql#>\n" +
                "PREFIX opengis: <http://www.opengis.net/def/uom/OGC/1.0/>\n" +
                "\n" +
                "SELECT * WHERE {\n" +
                "  {\n" +
                "    SELECT * WHERE {\n" +
                "      lucas_r:" + id + " geo:hasGeometry ?l_geom_id .\n" +
                "      ?l_geom_id geo:asWKT ?l_geom .\n" +
                "      ?inv invekos:hasCropTypeNumber ?i_ctype .\n" +
                "      ?inv geo:hasGeometry ?i_geom_id .\n" +
                "      ?i_geom_id geo:asWKT ?i_geom .\n" +
                "      BIND(geof:distance(?l_geom,?i_geom,opengis:metre) as ?distance) .\n" +
                "      FILTER(?distance < 10) .\n" +
                "    }\n" +
                "    ORDER BY ASC(?distance)\n" +
                "    LIMIT 1\n" +
                "  }\n" +
                "  lucas_r:" + id + " lucas:hasLC1 ?lc1 .\n" +
                "  lucas_r:" + id + " lucas:hasLC1_SPEC ?lc1_sp .\n" +
                "  ?c lictm:lucasLC1 ?lc1 .\n" +
                "  ?c lictm:lucasLC1_spec ?lc1_sp .\n" +
                "  ?c lictm:invekosCropTypeNumber ?l_ctype .\n" +
                "  FILTER(?l_ctype = ?i_ctype) .\n" +
                "}";
    }

    public static String getQuery2(int id) {
        return "" +
                "PREFIX lucas: <http://deg.iit.demokritos.gr/lucas/>\n" +
                "PREFIX lucas_r: <http://deg.iit.demokritos.gr/lucas/resource/>\n" +
                "PREFIX invekos: <http://deg.iit.demokritos.gr/invekos/>\n" +
                "PREFIX lictm: <http://deg.iit.demokritos.gr/>\n" +
                "PREFIX geof: <http://www.opengis.net/def/function/geosparql/>\n" +
                "PREFIX geo: <http://www.opengis.net/ont/geosparql#>\n" +
                "PREFIX opengis: <http://www.opengis.net/def/uom/OGC/1.0/>\n" +
                "SELECT * WHERE {\n" +
                "  {\n" +
                "    SELECT * WHERE {\n" +
                "      lucas_r:" + id + " geo:hasGeometry ?l_geom_id .\n" +
                "      ?l_geom_id geo:asWKT ?l_geom .\n" +
                "      ?inv invekos:hasCropTypeNumber ?i_ctype .\n" +
                "      ?inv geo:hasGeometry ?i_geom_id .\n" +
                "      ?i_geom_id geo:asWKT ?i_geom .\n" +
                "      BIND(geof:distance(?l_geom,?i_geom,opengis:metre) as ?distance) .\n" +
                "      FILTER(?distance < 10) .\n" +
                "    }\n" +
                "    ORDER BY ASC(?distance)\n" +
                "    LIMIT 1\n" +
                "  }\n" +
                "  FILTER NOT EXISTS {\n" +
                "    lucas_r:" + id + " lucas:hasLC1 ?lc1 .\n" +
                "    lucas_r:" + id + " lucas:hasLC1_SPEC ?lc1_sp .\n" +
                "    ?c lictm:lucasLC1 ?lc1 .\n" +
                "    ?c lictm:lucasLC1_spec ?lc1_sp .\n" +
                "    ?c lictm:invekosCropTypeNumber ?l_ctype .\n" +
                "    FILTER(?l_ctype = ?i_ctype) . \n" +
                "  }\n" +
                "}";
    }

    public static String getQuery3(int id) {
        return "" +
                "PREFIX lucas: <http://deg.iit.demokritos.gr/lucas/>\n" +
                "PREFIX lucas_r: <http://deg.iit.demokritos.gr/lucas/resource/>\n" +
                "PREFIX invekos: <http://deg.iit.demokritos.gr/invekos/>\n" +
                "PREFIX lictm: <http://deg.iit.demokritos.gr/>\n" +
                "PREFIX geof: <http://www.opengis.net/def/function/geosparql/>\n" +
                "PREFIX geo: <http://www.opengis.net/ont/geosparql#>\n" +
                "PREFIX opengis: <http://www.opengis.net/def/uom/OGC/1.0/>\n" +
                "\n" +
                "SELECT * WHERE {\n" +
                "  lucas_r:" + id + " lucas:hasLC1 ?lc1 .\n" +
                "  lucas_r:" + id + " lucas:hasLC1_SPEC ?lc1_sp .\n" +
                "  ?c lictm:lucasLC1 ?lc1 .\n" +
                "  ?c lictm:lucasLC1_spec ?lc1_sp .\n" +
                "  {\n" +
                "    SELECT * WHERE {\n" +
                "      lucas_r:" + id + " geo:hasGeometry ?l_geom_id .\n" +
                "      ?l_geom_id geo:asWKT ?l_geom .\n" +
                "      ?inv invekos:hasCropTypeNumber ?i_ctype .\n" +
                "      ?inv geo:hasGeometry ?i_geom_id .\n" +
                "      ?i_geom_id geo:asWKT ?i_geom .\n" +
                "      \n" +
                "      BIND(geof:distance(?l_geom,?i_geom,opengis:metre) as ?distance) .\n" +
                "      FILTER (?distance >= 0) .\n" +
                "    }\n" +
                "    ORDER BY ASC(?distance)\n" +
                "    LIMIT 1\n" +
                "  }\n" +
                "  FILTER(?distance >= 10) .\n" +
                "}";
    }
}
